{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","setcategories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAgB9C,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAIlB,SAEI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAlBe,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAsB,IAArBJ,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGpC,OADDc,QAAQC,IAAIN,EAAIC,GAEX,sBAAKM,UAAU,yCAAf,UAEG,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACnB,4BAAIA,QCLHS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAmBtC,OAZAC,qBAAW,WAEP1B,EAASC,GACJ0B,MAAM,SAAAC,GACHH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAItB,IAEIC,EDhBuBK,CAAa5B,GAA/Ba,EAFuB,EAE5BN,KAAae,EAFe,EAEfA,QAEpB,OACI,qCACI,oBAAIJ,UAAU,mCAAd,SAAkDlB,IAChDsB,GAAW,2CACb,qBAAKJ,UAAU,YAAf,SAEQL,EAAOJ,KAAI,SAACC,GAAD,OACH,cAAC,EAAD,eAEQA,GADEA,EAAIC,aEmB3BkB,EA/BM,WAAO,IAAD,EAEa3C,mBAAS,CAAC,YAFvB,mBAEhB4C,EAFgB,KAEJC,EAFI,KASvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAc9C,cAAe8C,IAC7B,uBAIA,6BAEQD,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCnBlCgC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.90c33364.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { PropTypes } from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setinputValue] = useState('');\n\n    const handleInputaChange = (e) => {\n        setinputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(inputValue.trim().length > 2){\n            setCategories(cats => [inputValue, ...cats]);\n            setinputValue('');\n        }\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputaChange}\n            />\n            \n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const getGifs = async(category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=tLD6SM4AldL5udfL4OVaWYYapAKEuBmq`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n\n    return gifs;\n}\n","import React from 'react';\n\nexport const GifGridItem = ({id, title, url}) => {\n\n   console.log(id, title);\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n\n           <img src={url} alt={title}/>\n            <p>{title}</p>            \n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n    const {data:images, loading}= useFetchGifs(category);\n    \n    return (\n        <>\n            <h3 className=\"animate__animated animate__flash\">{category}</h3>\n            { loading && <p>Loading...</p>  }\n            <div className=\"card-grid\">\n                {\n                    images.map((img) => (\n                            <GifGridItem\n                                key={ img.id}\n                                {...img} />\n                    ))\n                }\n                \n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n\n        getGifs( category )\n            .then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n            })\n        \n    }, [])\n\n    return state; //{ data: [], loading: true};\n}","import { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nconst GifExpertApp = () => {\n\n    const [categories, setcategories] = useState(['Animals']);\n\n    // const handleAdd = () => {\n    //     return setcategories( [...categories, 'Sasha']);\n    // }\n\n\n    return (\n        <>\n            <h2>GitExpertApp</h2>\n            <AddCategory  setCategories={setcategories} />\n            <hr/>\n\n            \n\n            <ol>\n                {\n                    categories.map( category => (\n                        <GifGrid\n                            key={ category } \n                            category={ category }/>\n                    ))\n                }\n            </ol>\n        </>\n    )\n\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}